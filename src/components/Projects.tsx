'use client';

import React, { useState } from 'react';
import { ExternalLink, Github, X, ChevronLeft, ChevronRight } from 'lucide-react';


interface Project {
  title: string;
  description: string;
  images: string[];
  github: string;
  demo: string;
  longDescription: string;
  technologies: string[];
  features: string[];
}

const Projects = () => {
  const [selectedProject, setSelectedProject] = useState<Project | null>(null);
  const [currentImageIndex, setCurrentImageIndex] = useState(0);

  const projects: Project[] = [
    {
      title: "Financial Falcon",
      description: "A full-stack web application built with Node.js.",
      images: [
        "https://images.unsplash.com/photo-1517694712202-14dd9538aa97?auto=format&fit=crop&w=800&q=80",
        "https://images.unsplash.com/photo-1555099962-4199c345e5dd?auto=format&fit=crop&w=800&q=80"
      ],
      github: "",
      demo: "https://financial-falcon.vercel.app/",
      longDescription: "This project is a comprehensive full-stack web application that demonstrates modern web development practices. It features real-time data synchronization, user authentication, and responsive design principles.",
      technologies: ["Next.js", "vercel/postgres", "TypeScript", "Database Design", "TailwindCSS", "Prisma ORM", "reCAPTCHA"],
      features: [
        "Designed and implemented database schema for storing data in an efficiency way.",
        "Improved data fetching performance and reduced database load by optimizing Prisma queries.",
        "Developed a robust authentication system using NextAuth, incorporating both credential (email) login and Google OAuth login, enhancing user flexibility and security.",
        "Integrated password reset functionality with Google reCAPTCHA verification, improving account recovery security and protecting against automated bot attacks."
      ]
    },
    {
      title: "Apologist Project - Validation",
      description: "A full-stack web application using RAG + LLM to validate the response generated by another LLM.",
      images: [
        "https://images.unsplash.com/photo-1486312338219-ce68d2c6f44d?auto=format&fit=crop&w=800&q=80",
        "https://images.unsplash.com/photo-1472437774355-71ab6752b434?auto=format&fit=crop&w=800&q=80",
        "https://images.unsplash.com/photo-1559526324-593bc073d938?auto=format&fit=crop&w=800&q=80"
      ],
      github: "",
      demo: "",
      longDescription: "This project is a comprehensive full-stack web application using LLM and RAG to validate the response generated by another LLM. It features real-time data synchronization, allowing user to review and update expected responses and select acceptable responses.",
      technologies: ["Next.js", "JavaScript", "vercel/postgres", "Bootstrap", "Prisma ORM", "LLM", "RAG"],
      features: [
        "Designed and Implemented an evaluation website to evaluate AI generated response by using different language model. Scored the response with accuracy and sympathy for improving the response.",
        "Improved data fetching performance and reduced database load by optimizing Prisma queries.",
        "Designed an UI for user to input the expected response and get the evaluation result.",
      ]
    },
    {
      title: "Scrumptious - Projects and Tasks Management Website",
      description: "AI-powered data visualization dashboard",
      images: [
        "https://images.unsplash.com/photo-1504868584819-f8e8b4b6d7e3?auto=format&fit=crop&w=800&q=80",
        "https://images.unsplash.com/photo-1551288049-bebda4e38f71?auto=format&fit=crop&w=800&q=80",
        "https://images.unsplash.com/photo-1551288049-bebda4e38f71?auto=format&fit=crop&w=800&q=80"
      ],
      github: "https://github.com",
      demo: "https://example.com",
      longDescription: "A sophisticated data visualization dashboard that leverages AI to provide meaningful insights. The project includes interactive charts, predictive analytics, and customizable reporting features.",
      technologies: ["React", "D3.js", "TensorFlow.js", "Python", "FastAPI", "Docker"],
      features: [
        "Leveraged FastAPI to create a high-performance backend that efficiently handles data storage and retrieval in MongoDB, resulting in a reduction in API response time.",
        "Implemented robust authentication and authorization features using JWT to ensure data security and privacy.",
        "Developed a project management tool using MongoDB, FastAPI, and React, allowing users to create projects and tasks for efficient team collaboration.",
        "Built a dynamic and user-friendly interface with React, featuring a drag-and-drop function for seamless task management.",
        "Utilized modern web development practices, including responsive design and modular code organization, to create a scalable and maintainable application.",
        "Collaborated with a team of developers to design and implement the application, utilizing agile methodologies for effective project management.",
        "Utilized SendGrid to send out actual emails in the project, ensuring reliable and efficient delivery of communication to project stakeholders."
      ]
    },
    {
      title: "CarCar - Dealership Management System",
      description: "AI-powered data visualization dashboard",
      images: [
        "https://images.unsplash.com/photo-1504868584819-f8e8b4b6d7e3?auto=format&fit=crop&w=800&q=80",
        "https://images.unsplash.com/photo-1551288049-bebda4e38f71?auto=format&fit=crop&w=800&q=80",
        "https://images.unsplash.com/photo-1551288049-bebda4e38f71?auto=format&fit=crop&w=800&q=80"
      ],
      github: "https://gitlab.com/zodramleo/project-car-car",
      demo: "https://example.com",
      longDescription: "A sophisticated data visualization dashboard that leverages AI to provide meaningful insights. The project includes interactive charts, predictive analytics, and customizable reporting features.",
      technologies: ["React", "D3.js", "TensorFlow.js", "Python", "FastAPI", "Docker"],
      features: [
        "Implemented a microservices architecture in Django and Docker to enhance system flexibility and enable seamless scalability in response to changing business needs.",
        "Optimized React performance by integrating data loading functionality within the <App> component, reducing redundant data requests and improving overall user experience, resulting in a reduction in load time.",
        "Developed web applications using the Django framework, implementing features such as database connectivity, and RESTful APIs.",
        "Built and deployed Docker containers for web applications, ensuring consistency and reproducibility across development and production environments.",
        "Utilized React to create responsive and dynamic front-end user interfaces for web applications, including integrating with APIs.",
        "Implemented responsive design principles and accessibility best practices to ensure web applications are accessible to a wide range of users.",
        "Utilized version control tools such as Git to collaborate with team members and manage project codebase.",
        "Designed and implemented relational database schemas using PostgreSQL and utilized Django ORM to query and manage data."
      ]
    },
    {
      title: "Conference Go - Conference Management System",
      description: "A web system for managing conferences.",
      images: [
        "https://images.unsplash.com/photo-1504868584819-f8e8b4b6d7e3?auto=format&fit=crop&w=800&q=80"
      ],
      github: "https://gitlab.com/zodramleo/conference-go",
      demo: "",
      longDescription: "A web system for managing conferences built with React, Django, RabgbitMQ, PostgreSQL using microservice design.",
      technologies: ["Django", "Docker", "Bootstrap", "RabgbitMQ", "Insomnia", "PostgreSQL", "Python", "JavaScript"],
      features: [
        "Transformed a monolithic application into a scalable and agile system by implementing a microservices architecture, resulting in a reduction in infrastructure costs and an increase in system flexibility.",
        "Implemented a message queue using RabbitMQ to establish a reliable connection with an email server, enabling automated notifications and minimizing the risk of errors in the email sending process.",
        "Developed web applications using the Django framework, implementing features such as database connectivity, and RESTful APIs.",
        "Built and deployed Docker containers for web applications, ensuring consistency and reproducibility across development and production environments.",
        "Designed and implemented relational database schemas using PostgreSQL and utilized Django ORM to query and manage data.",
        "Utilized React to create responsive and dynamic front-end user interfaces for web applications, including integrating with APIs.",
        "Leveraged Pixels API and OpenWeather API to retrieve city-specific images and weather data for dynamic content generation."
      ]
    },
  ];

  const handleImageNavigation = (direction: 'prev' | 'next') => {
    if (!selectedProject) return;
    
    setCurrentImageIndex(prevIndex => {
      if (direction === 'prev') {
        return prevIndex === 0 ? selectedProject.images.length - 1 : prevIndex - 1;
      } else {
        return prevIndex === selectedProject.images.length - 1 ? 0 : prevIndex + 1;
      }
    });
  };

  const handleProjectClick = (project: Project) => {
    setSelectedProject(project);
    setCurrentImageIndex(0);
  };

  return (
    <section id="projects" className="py-20 bg-gray-50">
      <div className="container mx-auto px-6">
        <h2 className="text-3xl md:text-4xl font-bold text-center mb-12">My Projects</h2>
        <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
          {projects.map((project, index) => (
            <div 
              key={index} 
              className="bg-white rounded-lg overflow-hidden shadow-lg hover:shadow-xl transition-shadow cursor-pointer"
              onClick={() => handleProjectClick(project)}
            >
              <img
                src={project.images[0]}
                alt={project.title}
                className="w-full h-48 object-cover"
              />
              <div className="p-6">
                <h3 className="text-xl font-semibold mb-2">{project.title}</h3>
                <p className="text-gray-600 mb-4">{project.description}</p>
                <div className="flex justify-between items-center">
                  <a
                    href={project.github}
                    className="flex items-center gap-2 text-gray-600 hover:text-gray-900"
                    target="_blank"
                    rel="noopener noreferrer"
                    onClick={(e) => e.stopPropagation()}
                  >
                    <Github size={20} />
                    Code
                  </a>
                  <a
                    href={project.demo}
                    className="flex items-center gap-2 text-indigo-600 hover:text-indigo-700"
                    target="_blank"
                    rel="noopener noreferrer"
                    onClick={(e) => e.stopPropagation()}
                  >
                    <ExternalLink size={20} />
                    Live Demo
                  </a>
                </div>
              </div>
            </div>
          ))}
        </div>

        {/* Project Modal */}
        {selectedProject && (
          <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4">
            <div className="bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto">
              <div className="sticky top-0 bg-white border-b border-gray-200 p-4 flex justify-between items-center">
                <h3 className="text-2xl font-bold">{selectedProject.title}</h3>
                <button 
                  onClick={() => setSelectedProject(null)}
                  className="p-1 hover:bg-gray-100 rounded-full transition-colors"
                >
                  <X size={24} />
                </button>
              </div>
              <div className="p-6">
                {/* Image Gallery */}
                <div className="relative mb-6">
                  <img
                    src={selectedProject.images[currentImageIndex]}
                    alt={`${selectedProject.title} - Image ${currentImageIndex + 1}`}
                    className="w-full h-[400px] object-cover rounded-lg"
                  />
                  
                  {/* Image Navigation */}
                  <div className="absolute inset-0 flex items-center justify-between">
                    <button
                      onClick={() => handleImageNavigation('prev')}
                      className="p-2 bg-black/50 hover:bg-black/70 text-white rounded-full ml-4 transition-colors"
                    >
                      <ChevronLeft size={24} />
                    </button>
                    <button
                      onClick={() => handleImageNavigation('next')}
                      className="p-2 bg-black/50 hover:bg-black/70 text-white rounded-full mr-4 transition-colors"
                    >
                      <ChevronRight size={24} />
                    </button>
                  </div>

                  {/* Image Indicators */}
                  <div className="absolute bottom-4 left-1/2 transform -translate-x-1/2 flex gap-2">
                    {selectedProject.images.map((_, index) => (
                      <button
                        key={index}
                        onClick={() => setCurrentImageIndex(index)}
                        className={`w-2 h-2 rounded-full transition-colors ${
                          index === currentImageIndex ? 'bg-white' : 'bg-white/50'
                        }`}
                      />
                    ))}
                  </div>
                </div>

                <div className="prose max-w-none">
                  <h4 className="text-xl font-semibold mb-2">Overview</h4>
                  <p className="text-gray-700 mb-6">{selectedProject.longDescription}</p>

                  <h4 className="text-xl font-semibold mb-2">Technologies Used</h4>
                  <div className="flex flex-wrap gap-2 mb-6">
                    {selectedProject.technologies.map((tech, index) => (
                      <span 
                        key={index}
                        className="px-3 py-1 bg-indigo-100 text-indigo-700 rounded-full text-sm"
                      >
                        {tech}
                      </span>
                    ))}
                  </div>

                  <h4 className="text-xl font-semibold mb-2">Key Features</h4>
                  <ul className="list-disc pl-6 mb-6">
                    {selectedProject.features.map((feature, index) => (
                      <li key={index} className="text-gray-700 mb-2">{feature}</li>
                    ))}
                  </ul>

                  <div className="flex gap-4 mt-8">
                    <a
                      href={selectedProject.github}
                      className="flex items-center gap-2 px-4 py-2 bg-gray-900 text-white rounded-lg hover:bg-gray-800 transition-colors"
                      target="_blank"
                      rel="noopener noreferrer"
                    >
                      <Github size={20} />
                      View Source Code
                    </a>
                    <a
                      href={selectedProject.demo}
                      className="flex items-center gap-2 px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition-colors"
                      target="_blank"
                      rel="noopener noreferrer"
                    >
                      <ExternalLink size={20} />
                      Live Demo
                    </a>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </section>
  );
};

export default Projects;