import { ProjectDescription } from "@/lib/types";
import { SkillDescription } from "@/lib/types";

export const skillDescriptions: SkillDescription[] = [
    { category: "Frontend", items: ["React", "Next.js", "TypeScript", "Tailwind CSS"] },
    { category: "Backend", items: ["FastAPI", "Django", "PostgreSQL", "MongoDB"] },
    { category: "Tools", items: ["Git", "Docker", "LLM", "Prisma ORM"] },
    { category: "Other", items: ["CI/CD", "Agile", "UI/UX Design", "Testing"] }
];

export const projectDescriptions: ProjectDescription[] = [
    {
      title: "Financial Falcon",
      description:
        "A full-stack web application built with Node.js for finance.",
      images: [
        "https://i.postimg.cc/PJC1fhSy/first.png",
        "https://i.postimg.cc/wMnL7PPp/login.png",
        "https://i.postimg.cc/ZqL8Vw98/home.png",
        "https://i.postimg.cc/V6Gjc5W5/ff1.png",
        "https://i.postimg.cc/xCTK7LHW/ff2.png"
      ],
      github: "",
      demo: "https://financial-falcon.vercel.app/",
      longDescription:
        "This project is a comprehensive full-stack web application for finance. It features real-time data synchronization, user authentication, and responsive design principles.",
      technologies: [
        "Next.js",
        "vercel/postgres",
        "TypeScript",
        "TailwindCSS",
        "Postman",
        "Prisma ORM",
        "Google OAuth",
        "reCAPTCHA"
      ],
      features: [
        "Designed and implemented database schema for storing data in an efficiency way.",
        "Improved data fetching performance and reduced database load by optimizing Prisma queries.",
        "Developed a robust authentication system using NextAuth, incorporating both credential (email) login and Google OAuth login, enhancing user flexibility and security.",
        "Integrated password reset functionality with Google reCAPTCHA verification, improving account recovery security and protecting against automated bot attacks."
      ],
    },
    {
      title: "Apologist Project - Validation",
      description:
        "A full-stack web application using RAG + LLM to validate the response generated by another LLM.",
      images: [
        "https://i.postimg.cc/NFtLScWL/validate.png",
        "https://i.postimg.cc/ydckLdpw/prompts.png",
        "https://i.postimg.cc/QMRFg5mQ/configs.png"
      ],
      github: "",
      demo: "",
      longDescription:
        "This project is a comprehensive full-stack web application using LLM and RAG to validate the response generated by another LLM. It features real-time data synchronization, allowing user to review and update expected responses and select acceptable responses.",
      technologies: [
        "Next.js",
        "JavaScript",
        "vercel/postgres",
        "Bootstrap",
        "Prisma ORM",
        "LLM",
        "RAG"
      ],
      features: [
        "Designed and Implemented an evaluation website to evaluate AI generated response by using different language model. Scored the response with accuracy and sympathy for improving the response.",
        "Improved data fetching performance and reduced database load by optimizing Prisma queries.",
        "Designed an UI for user to input the expected response and get the evaluation result.",
        "Created an auto-run function so that the website can run the evaluation automatically."
      ],
    },
    {
      title: "Scrumptious - Projects and Tasks Management Website",
      description: "Task management website for project management.",
      images: [
        "https://i.postimg.cc/PxQdL8Rr/landing-Page.png",
        "https://i.postimg.cc/MZYGHgCb/signup.png",
        "https://i.postimg.cc/NffjHpYh/signin.png",
        "https://i.postimg.cc/ZKBsqzgC/stickyboard-list.png", 
        "https://i.postimg.cc/Y2yykCd5/stickyboard-create.png",
        "https://i.postimg.cc/qqYmG1tJ/stickynote-list.png"
      ],
      github: "",
      demo: "",
      longDescription:
        "Scrumptious is a web application that facilitates project management using a Scrum-based approach with the aid of Sticky Notes and Sticky Boards. The frontend of the application is developed using React and is organized into separate directories for Sticky Notes, Sticky Boards, and Accounts. The backend of the application is built using FastAPI and MongoDB to maintain the directory structure. Additionally, the application uses microservices architecture by leveraging Docker.",
      technologies: [
        "React",
        "FastAPI",
        "Docker",
        "Tailwind",
        "Insomnia",
        "MongoDB",
        "Python",
        "JavaScript"
      ],
      features: [
        "Leveraged FastAPI to create a high-performance backend that efficiently handles data storage and retrieval in MongoDB, resulting in a reduction in API response time.",
        "Implemented robust authentication and authorization features using JWT to ensure data security and privacy.",
        "Developed a project management tool using MongoDB, FastAPI, and React, allowing users to create projects and tasks for efficient team collaboration.",
        "Built a dynamic and user-friendly interface with React, featuring a drag-and-drop function for seamless task management.",
        "Utilized modern web development practices, including responsive design and modular code organization, to create a scalable and maintainable application.",
        "Collaborated with a team of developers to design and implement the application, utilizing agile methodologies for effective project management.",
        "Utilized SendGrid to send out actual emails in the project, ensuring reliable and efficient delivery of communication to project stakeholders."
      ],
    },
    {
      title: "CarCar - Dealership Management System",
      description: "Web system for car dealerships.",
      images: [
        "https://i.postimg.cc/1RvW933G/diagram-Wide.png",
        "https://i.postimg.cc/HW9qbmsn/carcar1.png",
        "https://i.postimg.cc/cLrPq87t/cc-Inventory.png",
        "https://i.postimg.cc/T3FFTYQ7/cc-Service1.png",
        "https://i.postimg.cc/g0h5jFTY/cc-Service2.png",
        "https://i.postimg.cc/nztWQRyq/cc-Service3.png",
        "https://i.postimg.cc/c4DP5c3N/ccSales1.png",
        "https://i.postimg.cc/025Lf4bf/ccSale2.png"
      ],
      github: "https://gitlab.com/zodramleo/project-car-car",
      demo: "",
      longDescription:
        "an application made to help manage a automobile dealership business. The application consists of three microservices: Inventory, Sales, and Service.",
      technologies: [
        "React",
        "Django",
        "Docker",
        "Bootstrap",
        "Insomnia",
        "PostgreSQL",
        "Python",
        "JavaScript"
      ],
      features: [
        "Implemented a microservices architecture in Django and Docker to enhance system flexibility and enable seamless scalability in response to changing business needs.",
        "Optimized React performance by integrating data loading functionality within the <App> component, reducing redundant data requests and improving overall user experience, resulting in a reduction in load time.",
        "Developed web applications using the Django framework, implementing features such as database connectivity, and RESTful APIs.",
        "Built and deployed Docker containers for web applications, ensuring consistency and reproducibility across development and production environments.",
        "Utilized React to create responsive and dynamic front-end user interfaces for web applications, including integrating with APIs.",
        "Implemented responsive design principles and accessibility best practices to ensure web applications are accessible to a wide range of users.",
        "Utilized version control tools such as Git to collaborate with team members and manage project codebase.",
        "Designed and implemented relational database schemas using PostgreSQL and utilized Django ORM to query and manage data."
      ],
    },
    {
      title: "Conference Go - Conference Management System",
      description: "A web system for managing conferences.",
      images: [
        "https://i.postimg.cc/DZqtjkrC/cg1.png",
        "https://i.postimg.cc/6qcFKr1n/cg2.png",
        "https://i.postimg.cc/mkBKKXVT/cg3.png"
      ],
      github: "https://gitlab.com/zodramleo/conference-go",
      demo: "",
      longDescription:
        "A web system for managing conferences built with Django, RabgbitMQ, and PostgreSQL using microservice design.",
      technologies: [
        "Django",
        "Docker",
        "Bootstrap",
        "RabgbitMQ",
        "Insomnia",
        "PostgreSQL",
        "Python",
        "JavaScript"
      ],
      features: [
        "Transformed a monolithic application into a scalable and agile system by implementing a microservices architecture, resulting in a reduction in infrastructure costs and an increase in system flexibility.",
        "Implemented a message queue using RabbitMQ to establish a reliable connection with an email server, enabling automated notifications and minimizing the risk of errors in the email sending process.",
        "Developed web applications using the Django framework, implementing features such as database connectivity, and RESTful APIs.",
        "Built and deployed Docker containers for web applications, ensuring consistency and reproducibility across development and production environments.",
        "Designed and implemented relational database schemas using PostgreSQL and utilized Django ORM to query and manage data.",
        "Utilized React to create responsive and dynamic front-end user interfaces for web applications, including integrating with APIs.",
        "Leveraged Pixels API and OpenWeather API to retrieve city-specific images and weather data for dynamic content generation."
      ],
    },
  ];